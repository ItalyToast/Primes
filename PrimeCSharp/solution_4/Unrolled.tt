<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Numerics;
using System.Runtime.CompilerServices;

namespace PrimeSieveCS
{ 
	class Unrolled
	{
		public static unsafe void ClearFactor(uint factor, byte* ptr, uint limit){
			switch(factor){
<#				for(int factor = 3; factor<= 20; factor+=2) { #>
				case <#= factor #>: ClearFactor<#= factor #>(ptr, limit); break;
<#				} #>
			}
		}

<#		
		for(int factor = 3; factor<= 20; factor+=2) { 
		var start =  (factor * factor) / 2;
#>
		public static unsafe void ClearFactor<#= factor #>(byte* ptr, uint limit){
			var startPtr = ptr;
			var endPtr = ptr + limit / 8 + 1;
			while (startPtr < endPtr - <#= ((start + 8 * factor)) / 8#>){
<#		for(int stride = 0; stride < 8; stride++) { #>
				startPtr[<#= ((start + stride * factor)) / 8#>] |= <#= 1 << ((start + stride * factor) % 8) #>;
<#		} #>
				startPtr += <#= factor #>;
			}

<#			for(int stride = 0; stride < 8; stride++) { #>
			if(startPtr + <#= (start + stride * factor) / 8#> > endPtr)return;
			startPtr[<#= ((start + stride * factor)) / 8#>] |= <#= 1 << ((start + stride * factor) % 8) #>;
<#			} #>
			}
	<#	} 
	#>
	}
}